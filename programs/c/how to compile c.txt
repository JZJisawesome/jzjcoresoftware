//Repeat this for each .c file
riscv64-unknown-elf-gcc -static-libgcc -lgcc -fdata-sections -ffunction-sections -Wl,--gc-sections -ffreestanding -nostdlib -march=rv32i -mabi=ilp32 -nostartfiles -nodefaultlibs -mstrict-align -Os -I ./include -c file.c -o file.o

//Do this for crt0.s
riscv64-unknown-elf-gcc -static-libgcc -lgcc -fdata-sections -ffunction-sections -Wl,--gc-sections -ffreestanding -nostdlib -march=rv32i -mabi=ilp32 -nostartfiles -nodefaultlibs -mstrict-align -Os -c crt0.s -o crt0.o

//If your application needs it, do this for jzjcorelib
//Note: To use gcc arithmetic functions including the header file is not needed, but for other JZJCoreLIB functions it is
riscv64-unknown-elf-gcc -static-libgcc -lgcc -fdata-sections -ffunction-sections -Wl,--gc-sections -ffreestanding -nostdlib -march=rv32i -mabi=ilp32 -nostartfiles -nodefaultlibs -mstrict-align -Os -c JZJCoreLib.S -o JZJCoreLib.o

//Link everything together using jzjcorea.ld
riscv64-unknown-elf-ld --gc-sections -T jzjcorea.ld -o a.out crt0.o JZJCoreLib.o file.o
riscv64-unknown-elf-gcc -T jzjcorea.ld -static-libgcc -lgcc -fdata-sections -ffunction-sections -Wl,--gc-sections -ffreestanding -nostdlib -march=rv32i -mabi=ilp32 -nostartfiles -nodefaultlibs -mstrict-align -Os -o a.out ./crt0.o

//Convert to a verilog hex file with 4 byte chunks
//Note: Figuring out that objcopy has a --verilog-data-width took me hours. I am crying adding it here
//riscv64-unknown-elf-objcopy ./a.out -O verilog --verilog-data-width=4

//Objcopy is partly broken as verilog addresses it outputs are byte-wise even though the data is correctly 32 bit
//Use this wrapper script instead (takes the file name as the first parameter and converts it to a proper verilog hex file for JZJCore)
//Note: riscv64-unknown-elf-objcopy must be in the PATH variable
//Note: overwrites original elf file, and produces originalfilename.hex
../convertelf.sh ./a.out



/* Debugging with qemu-system-riscv32 and riscv64-unknown-elf-gdb */
//TODO finish

//Repeat this for each .c file
riscv64-unknown-elf-gcc -fdata-sections -ffunction-sections -Wl,--gc-sections -ggdb -ffreestanding -nostdlib -march=rv32i -mabi=ilp32 -nostartfiles -nodefaultlibs -c -mstrict-align -I ./include file.c

//Do this for crt0.s
riscv64-unknown-elf-gcc -fdata-sections -ffunction-sections -Wl,--gc-sections -ggdb -ffreestanding -nostdlib -march=rv32i -mabi=ilp32 -nostartfiles -nodefaultlibs -c -mstrict-align crt0.s -o crt0.o

//If your application needs it, do this for jzjcorelib
//Note: To use gcc arithmetic functions including the header file is not needed, but for other JZJCoreLIB functions it is
riscv64-unknown-elf-gcc -fdata-sections -ffunction-sections -Wl,--gc-sections -ggdb -ffreestanding -nostdlib -march=rv32i -mabi=ilp32 -nostartfiles -nodefaultlibs -Os -c -mstrict-align JZJCoreLib.S -o JZJCoreLib.o

//Link everything together using jzjcorea.ld
riscv64-unknown-elf-ld --gc-sections -T jzjcorea.ld -o a.out crt0.o JZJCoreLib.o file.o

//todo instruction to start application
//qemu-system-riscv32 --machine none --cpu rv32 -S --drive file=a.out,format=raw --nographic --serial /dev/null
